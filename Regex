
# regex（正则表达式）
'''
\w 匹配字母、数字以及下划线
\W  匹配不是字母、数字以及下划线
\s 匹配任意空白字符，等价于[\t\n\r\f]
\S  匹配任意非空字符
\d 匹配任意数字，等价于[0-9]
\D  匹配任意非数字的字符
\A 匹配字符串开头
\Z  匹配字符串结尾，如果存在换行，只匹配到换行前的结束字符串
\z 匹配字符串结尾。如果存在换行，同时还会匹配换行符
\G  匹配最后匹配完成的位置
\n 匹配一个换行符
\t  匹配一个制表符
^  匹配一行字符串的开头
$   匹配一行字符串的结尾
。  匹配任意字符，除换行符，当re.DOTALL标记被指定时，可以匹配包括换行符的任意字符
[...]  用来表示一组字符，单独列出，例如[amk]用来匹配a,m或k
[^...]  匹配不在[]中的字符，例如匹配除了a，b，c之外的字符
*   匹配0个或多个表达式
+   匹配一个或者多个表达式
？   匹配0个或1个前面的正则表达式定义的片段，非贪婪方式
{n} 精确匹配n个前面的表达式
{n,m}   匹配到n到m次由前面正则表达式定义的片段，贪婪方式
a | b 匹配a或b
（）  匹配括号内的表达式，也表示一个组
'''

# match匹配
import re
content = 'Hello 123 4567 World_This is a Regex Demo'
print(len(content))
result = re.match('^Hello\s\d\d\d\s\d{4}\s\w{10}', content)
print(result)
print(result.group())
print(result.span())

# 目标匹配
# import re
content = 'Hello 1234567 World_This is a Regex Demo'
result = re.match('^Hello\s(\d+)\sWorld', content)
print(result)
print(result.group())
print(result.group(1))
print(result.span())

# 通用匹配
# import re
content3 = 'Hello 123 4567 World_This is a Regex Demo'
result = re.match('^Hello.*Demo$', content3)
print(result)
print(result.group())
print(result.span())

# 贪婪与非贪婪
# import re
content4 = 'Hello 1234567 World_This is a Regex Demo'
result = re.match('^He.*(\d+).*Demo$', content4)         # 贪婪匹配
print(result)
print(result.group(1))

# import re
content4_1 = 'Hello 1234567 World_This is a Regex Demo'  # 非贪婪匹配
result = re.match('^He.*?(\d+).*Demo$', content4_1)
print(result)
print(result.group(1))

# import re
content4_2 = 'http://weibo.com/comment/kEraCN'
result1 = re.match('http.*?comment/(.*?)', content4_2)     # 非贪婪算法需要注意到到问题
result2 = re.match('http.*?comment/(.*)', content4_2)
print('result', result1.group(1))
print('result2', result2.group(1))


# 修饰符
'''
re.I >>>>>> 使匹配对大小写不敏感
re.L >>>>>> 实现本地化识别（locale-aware)
re.M >>>>>> 多行匹配，影响^和$
re.S >>>>>> 使用匹配内容包括换行符在内对所有字符
re.U >>>>>> 根据Unicode字符集解析字符。这个标志会影响\w、\W、\b和\B
re.X >>>>>> 该标志能够给予你更灵活的格式，以便将正则表达式书写得更易于理解
'''
# import re
content5 = '''Hello 1234567 World_This
is a Regex Demo
'''

# result = re.match('^He.*?(\d+).*?Demo$', content5)        # 这个上错误的写法
result = re.match('^He.*?(\d+).*?Demo$', content5, re.S)
print(result.group(1))


# 转义匹配
# import re
content = '(百度)www.baidu.com'
result = re.match('\(百度\)www\.baidu\.com', content)
print(result)


# search
# import re

content = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra      stings'
result = re.match('Hello.*?(\d+).*?Demo', content)
result1 = re.search('Hello.*?(\d+).*?Demo', content)
print(result)
print(result1)


html = '''<div id="'songs-list">
    <h2 class="title">经典老歌</h2>
    <p class="introduction">
    经典老歌列表
    </p>
    <ul id="list" class="list-group">
    <li data-view="2">一路上有你</li>
    <li data-view="7">
    <a href="/2.mp3" singer="任贤齐">沧海一声笑</a>
    </li>
    <li data-view="4" class="active">
    <a href="/3.mp3" singer="齐秦">往事随风</a>
    </li>
    <li data-view="6"><a href="/4.mp3" singer="beyond">光辉岁月</a></li>
    <li data-view="5"><a href="/5.mp3" singer="陈慧琳">记事本</a></li>
    <li data-view="5">
    <a href="/6.mp3" singer="邓丽君">但愿人长久</a>
    </li>
    </ul>
    </div>'''

result = re.search('<li.*?active.*?singer="(.*?)">(.*?)</a>', html, re.S)       # 齐秦 往事随风
if result:
    print(result.group(1), result.group(2))

result = re.search('<li.*?singer="(.*?)">(.*?)</a>', html, re.S)                # 任贤齐 沧海一声笑
if result:
    print(result.group(1), result.group(2))

result = re.search('<li.*?singer="(.*?)">(.*?)</a>', html)                      # beyond 光辉岁月
if result:
    print(result.group(1), result.group(2))


# findall
result = re.findall('<li.*?href="(.*?)".*?singer="(.*?)">(.*?)</a>', html, re.S)
print(result)
print(type(result))
for result in result:
    print(result)
    print(result[0], result[1], result[2])


# sub
# import re
content = '54aK54yr5oiR54ix5L2g'
content = re.sub('\d+', '', content)
print(content)

# 将上面html文本提取li节点歌名
results = re.findall('<li.*?>\s*?(<a.*?>)?(\w+)(</a>)?\s*?</li>', html, re.S)
for result in results:
    print(result[1])

# 使用sub方法提取
html = re.sub('<a.*?>|</a>', '', html)
print(html)
results = re.findall('<li.*?>(.*?)</li>', html, re.S)
for result in results:
    print(result.strip())


# compile
# import re

content1 = '2019-12-15 12:00'
content2 = '2019-12-17 12:55'
content3 = '2019-12-22 13:21'
pattern = re.compile('\d{2}:\d{2}')
result1 = re.sub(pattern, '', content1)
result2 = re.sub(pattern, '', content2)
result3 = re.sub(pattern, '', content3)
print(result1, result2, result3)
