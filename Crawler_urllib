# from urllib.request import HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, build_opener
# from urllib.error import URLError
#
# if __name__ == '__main__':
#
#     # 登入身份认证
#     username = 'admin'
#     password = 'admin'
#     url = 'http://ssr3.scrape.center/'
#
#     p = HTTPPasswordMgrWithDefaultRealm()
#     p.add_password(None, url, username, password)
#     auth_handler = HTTPBasicAuthHandler(p)
#     opener = build_opener(auth_handler)
#
#     try:
#         result = opener.open(url)
#         html = result.read().decode('utf-8')
#         print(html)
#     except URLError as e:
#         print(e.reason)


# IP代理,首先需要在本地搭建一个HTTP代理，并让其运行在8080端口上
# from urllib.error import URLError
# from urllib.request import ProxyHandler, build_opener
#
# proxy_handler = ProxyHandler({
#     'http': 'http://127.0.0.1:8080',
#     'https': 'https://127.0.0.1:8080'
# })
# opener = build_opener(proxy_handler)
# try:
#     response = opener.open('http://www.baidu.com')
#     print(response.read().decode('utf-8'))
# except URLError as e:
#     print(e.reason)


# cookie
# import http.cookiejar, urllib.request
# cookie = http.cookiejar.CookieJar()
# handle = urllib.request.HTTPCookieProcessor(cookie)
# opener = urllib.request.build_opener(handle)
# response = opener.open('http://www.baidu.com')
# for item in cookie:
#     print(item.name + "=" + item.value)

# 将cookie生成文本保存至本地
# import urllib.request, http.cookiejar
#
# filename = 'Cookie.txt'
# cookie = http.cookiejar.MozillaCookieJar(filename)
# 保存LWP格式的COOkie文件，可以在声明时就进行修改
# cookie = http.cookiejar.LWPCookieJar(filename)
# handle = urllib.request.HTTPCookieProcessor(cookie)
# opener = urllib.request.build_opener(handle)
# response = opener.open('http://www.baidu.com')
# cookie.save(ignore_discard=True, ignore_expires=True)

# 利用LWP格式的Cookie文件
# import urllib.request, http.cookiejar
#
# cookie = http.cookiejar.LWPCookieJar()
# cookie.load('cookie.txt', ignore_discard=True, ignore_expires=True)
# handler = urllib.request.HTTPCookieProcessor(cookie)
# opener = urllib.request.build_opener(handler)
# response = opener.open('http://www.baidu.com')
# print(response.read().decode('utf-8'))


# URLError
# from urllib import request, error
# try:
#     respone = request.urlopen('https://cuiqingcai.com/404')
# except error.URLError as e:
#     print(e.reason)


# from urllib import request, error
#
# try:
#     response = request.urlopen('https://cuiqingcai.com/404')
# except error.HTTPError as e:
#     print(e.reason, e.code, e.headers, sep='\n')


# urlparse
from urllib.parse import urlparse

# result = urlparse('http://www.baodu.com/index.html;user?id=5#comment')
# print(type(result))
# print(result)
# 使用scheme必须携带协议信息
result = urlparse('www.baidu.com/index.html;user?id=5#comment', scheme='https')
print(result)
result = urlparse('http://www.baidu.com/index.html;user?id=5#comment', scheme='https')
print(result)
# allow_fragments：是否忽略fragment ,如果设置成False,那么fragment部分就会被忽略
resutl = urlparse('http://www.baidu.com/index.html#comment', allow_fragments=False)
print(resutl)

# urlunparse
from urllib.parse import urlunparse
data = ['https', 'www.baidu.com', 'index.html', 'user', 'a=6', 'comment']
print(urlunparse(data))

# urlsplit
from urllib.parse import urlsplit
result = urlsplit('https://www.baidu.com/index.html:user?id=5#comment')
print(result)
print(result.scheme, result[0])


# urlunsplit
from urllib.parse import urlunsplit
data = ['https', 'www.baidu.com', 'index.html', 'a=6', 'comment']
print(urlunsplit(data) + '\n')


# urljoin
from urllib.parse import urljoin

print(urljoin('https://www.baidu.com', 'FAQ.html'))
print(urljoin('https://www.baidu.com', 'https://cuiqingcai.com/FAQ.html'))
print(urljoin('https://www.baidu.com/about.html', 'https://cuiqingcai.com/FAQ.html'))
print(urljoin('https://www.baidu.com/about.html', 'https://cuiqingcai.com/FAQ.html?question=2'))
print(urljoin('https://www.baidu.com?wd=abc', 'https//cuiqingcai.com/index.php'))
# print(urljoin('https://www.baidu.com/about.html', 'https://cuiqingcai.com/index.php'))
print(urljoin('https://www.baidu.com', '?category=2#comment'))
print(urljoin('https://www.baidu.com', '?category=2#comment'))
print(urljoin('http://www.baidu.com#comment', '?category=2'))


# urlencode
from urllib.parse import urlencode

params = {
    'name': 'germey',
    'age': '25'
}
base_url = 'https://www.baidu.com?'
url = base_url + urlencode(params)
print(url)


# parse_qs
from urllib.parse import parse_qs

query = 'name=germey&age=25'
print(parse_qs(query))


# parse_qsl
from urllib.parse import parse_qsl

query = 'name=germey&age=25'
print(parse_qsl(query))

# quote 将内容转化为URL编码的格式。当URL之中带有中文参数时，有可能导致乱码问题，用quote方法可以将中文字符转化为URL编码
from urllib.parse import quote
keyword = '壁纸'
url = 'https://www.baidu.com/s?wd=' + quote(keyword)
print(url)


# unquote 将URL编码的格式还原成中文
from urllib.parse import unquote
url = 'https://www.baidu.com/s?wd=%E5%A3%81%E7%BA%B8'
print(unquote(url))
