
'''
# 1，爬取https://ssr1.scrape.center/，每一页的电影列表，顺着列表再爬取每个电影的详情页
# 2. 用正则表达式提取每一部电影的名称、封面、类别、上映时间、评分、剧情简介等内容
# 3. 把以上爬取的内容保存为JSON文本文件
# 4. 使用多进程爬取
'''

# 数据爬取以及处理的模块
import logging
import requests
import asyncio
import re
from urllib.parse import urljoin
import json
# 保存数据的模块
# import os
from os import makedirs
from os.path import exists
# 多进程模块
import multiprocessing


# 设置网址的url 和 headers
url = 'https://ssr1.scrape.center'
# headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko/20100101 Firefox/99.0'}
# 异常处理
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')
total_page = 10


# 使用一个方法完成一个页的爬取
def scrape_page(url):
    logging.info('scraping %s...', url)
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.text
        logging.error('get invalid status code %s while scraping %s', response.status_code, url)
    except requests.RequestException:
        logging.error('error occurred while scraping %s', url, exc_info=True)


# 在scrape_page方法的基础上，定义列表的爬取方法
def scrape_index(page):
    index_url = f'{url}/page/{page}'
    return scrape_page(index_url)


# 获取html代码后，解析列表页，并得到每部电影的详情页的URL
def parse_index(html):
    pattern = re.compile('<a.*?href="(.*?)".*?class="name">')
    items = re.findall(pattern, html)
    if not items:
        return[]
    for item in items:
        detail_url = urljoin(url, item)
        logging.info('get detail url %s', detail_url)
        yield detail_url


# 获取详情页
"""
封面： img是节点，class属性为cover
名称： 是一个h2节点，其内容是电影名称
类别： 是一个span节点
上映时间：是span节点，外侧是class为info的div节点
评分： 是一个p节点，p节点的class属性为score
剧情简介：是一个p节点，外侧是class为drama的div节点
"""
def scrape_detail(url):
    return scrape_page(url)

# 根据获取的详情页使用正则提取数据
def parse_detail(html):
    # 封面
    cover_pattern = re.compile('class="item.*?<img.*?src="(.*?)".*?class="cover">', re.S)
    # 名称
    name_pattern = re.compile('<h2.*?>(.*?)</h2>')
    # 类别
    categories_pattern = re.compile('<button.*?category.*?<span>(.*?)</span>.*?</button>', re.S)
    # 上映时间
    published_at_pattern = re.compile('(\d{4}-\d{2}-\d{2}\s?上映)')
    # 评分
    drama_pattern = re.compile('<div.*?drama.*?>.*?<p.*?>(.*?)</p>', re.S)
    # 剧情简介
    score_pattern = re.compile('<p.*?score.*?>(.*?)</p>', re.S)

    cover = re.search(cover_pattern, html).group(1).strip() if re.search(cover_pattern, html) else None
    name = re.search(name_pattern, html).group(1).strip() if re.search(name_pattern, html) else None
    categories = re.findall(categories_pattern, html) if re.findall(categories_pattern, html) else []
    published_at = re.search(published_at_pattern, html).group(1) if re.search(published_at_pattern, html) else None
    drama = re.search(drama_pattern, html).group(1).strip() if re.search(drama_pattern, html) else None
    score = float(re.search(score_pattern, html).group(1).strip()) if re.search(score_pattern, html) else None

    return {
        'cover': cover,
        'name': name,
        'categories': categories,
        'published_at': published_at,
        'drama': drama,
        'score': score
    }


# 保存数据
results_dir = 'results'
exists(results_dir) or makedirs(results_dir)
def save_data(data):
    name = data.get('name')
    data_path = f'{results_dir}/{name}.json'
    json.dump(data, open(data_path, 'w', encoding='utf-8'), ensure_ascii=False, indent=2)


# 串联调用
def main(page):
    # # 链接解析
    # for page in range(1, total_page + 1):
    #     index_html = scrape_index(page)
    #     detail_urls = parse_index(index_html)
    #     logging.info('detail urls %s', list(detail_urls))

    # # 详情数据
    # for page in range(1, total_page + 1):
    #     index_html = scrape_index(page)
    #     detail_urls = parse_index(index_html)
    #     for detail_url in detail_urls:
    #         detail_html = scrape_detail(detail_url)
    #         data = parse_detail(detail_html)
    #         logging.info('get detail data %s', data)

    # # 数据保存
    # for page in range(1, total_page + 1):
    #     index_html = scrape_index(page)
    #     detail_urls = parse_index(index_html)
    #     for detail_url in detail_urls:
    #         detail_html = scrape_detail(detail_url)
    #         data = parse_detail(detail_html)
    #         logging.info('get detail data %s', data)
    #         logging.info('saveing data to json file')
    #         save_data(data)
    #         logging.info('data saved successfully')

    # 多进程同步
    index_html = scrape_index(page)
    detail_urls = parse_index(index_html)
    for detail_url in detail_urls:
        detail_html = scrape_detail(detail_url)
        data = parse_detail(detail_html)
        logging.info('get detail data %s', data)
        logging.info('saveing data to json data')
        save_data(data)
        logging.info('data saved successfully')


if __name__ == '__main__':
    # main()
    pool = multiprocessing.Pool()
    pages = range(1, total_page + 1)
    pool.map(main, pages)
    pool.close()
    pool.join()
